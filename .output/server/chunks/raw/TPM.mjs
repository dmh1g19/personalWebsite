// ROLLUP_NO_REPLACE 
 const TPM = "{\"parsed\":{\"_path\":\"/tpm\",\"_dir\":\"\",\"_draft\":false,\"_partial\":false,\"_locale\":\"\",\"title\":\"Exploring the Trusted Platform Module (TPM)\",\"description\":\"the most popular root of trust method for most computers\",\"category\":\"Sec ops\",\"recommended\":true,\"body\":{\"type\":\"root\",\"children\":[{\"type\":\"element\",\"tag\":\"h1\",\"props\":{\"id\":\"what-is-a-tpm\"},\"children\":[{\"type\":\"text\",\"value\":\"What is a TPM?\"}]},{\"type\":\"element\",\"tag\":\"br\",\"props\":{},\"children\":[]},{\"type\":\"element\",\"tag\":\"img\",\"props\":{\"src\":\"/img/tpm.webp\",\"alt\":\"tmp chip\",\"width\":400},\"children\":[]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"A Trusted Platform Module (TPM) is commonly used as a root of trust in many computers. A TPM is a specialized chip on an endpoint device that is designed to secure hardware through integrated cryptographic keys. Its primary purpose is to safeguard the system by integrating cryptographic keys into devices.\"}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"The TPM can be used for various security operations such as disk encryption, secure boot, and hardware-based authentication.\"}]},{\"type\":\"element\",\"tag\":\"h1\",\"props\":{\"id\":\"_1-start-the-chip\"},\"children\":[{\"type\":\"text\",\"value\":\"1. Start the chip\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-bash\"],\"code\":\" tpm2_startup -c -T mssim:host=localhost,port=2321\\n\",\"language\":\"bash\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\" tpm2_startup -c -T mssim:host=localhost,port=2321\\n\"}]}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"This command initializes the TPM simulator. -c clears the TPM memory (similar to resetting the TPM), and -T mssim:host=localhost,port=2321 specifies that the TPM tool (tpm2) should communicate with a TPM simulator running on the local machine (localhost) and listening on port 2321.\"}]},{\"type\":\"element\",\"tag\":\"h1\",\"props\":{\"id\":\"_2-read-a-pcr\"},\"children\":[{\"type\":\"text\",\"value\":\"2. Read a PCR\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-bash\"],\"code\":\" tpm2_pcrread -T mssim:host=localhost,port=2321 sha256\\n\",\"language\":\"bash\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\" tpm2_pcrread -T mssim:host=localhost,port=2321 sha256\\n\"}]}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"This reads the current values of the PCR slots using the SHA-256 hashing algorithm. PCRs are special registers in a TPM used to store hash values that represent a snapshot of the system state. They are used in the secure boot process and software attestation to ensure system integrity.\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-bash\"],\"code\":\"  sha256:\\n    0 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    1 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    2 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    3 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    4 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    5 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    6 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    7 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    8 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    9 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    10: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    11: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    12: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    13: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    14: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    15: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    16: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    17: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n    18: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n    19: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n    20: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n    21: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n    22: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n    23: 0x0000000000000000000000000000000000000000000000000000000000000000\\n\",\"language\":\"bash\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\"  sha256:\\n    0 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    1 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    2 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    3 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    4 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    5 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    6 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    7 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    8 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    9 : 0x0000000000000000000000000000000000000000000000000000000000000000\\n    10: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    11: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    12: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    13: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    14: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    15: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    16: 0x0000000000000000000000000000000000000000000000000000000000000000\\n    17: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n    18: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n    19: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n    20: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n    21: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n    22: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n    23: 0x0000000000000000000000000000000000000000000000000000000000000000\\n\"}]}]},{\"type\":\"element\",\"tag\":\"h1\",\"props\":{\"id\":\"_3-calculate-sha-256-hash\"},\"children\":[{\"type\":\"text\",\"value\":\"3. Calculate SHA-256 hash\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-bash\"],\"code\":\" SHA256_DATA=$(echo \\\"CRITICAL-DATA\\\" | openssl dgst -sha256 -binary | xxd -p -c 32)\\n\",\"language\":\"bash\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\" SHA256_DATA=$(echo \\\"CRITICAL-DATA\\\" | openssl dgst -sha256 -binary | xxd -p -c 32)\\n\"}]}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"We will simply use the plain text \\\"CRITICAL-DATA\\\" as our sensitive data that we will be encrypting and decrypting.\"}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"This command calculates the SHA-256 hash of the string \\\"CRITICAL-DATA\\\", converts the output to binary, and then formats it as a hex string.\"}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"The result is stored in the variable SHA256_DATA.\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-bash\"],\"code\":\" SHA256_DATA = ab805369897acf5a4536130b2d8799d6bcb9506de0f490b656ff7037f360a005\\n\",\"language\":\"bash\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\" SHA256_DATA = ab805369897acf5a4536130b2d8799d6bcb9506de0f490b656ff7037f360a005\\n\"}]}]},{\"type\":\"element\",\"tag\":\"h1\",\"props\":{\"id\":\"_4-calculate-sha-1-hash\"},\"children\":[{\"type\":\"text\",\"value\":\"4. Calculate SHA-1 hash\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-bash\"],\"code\":\" SHA1_DATA=$(echo \\\"CRITICAL-DATA\\\" | openssl dgst -sha1 -binary | xxd -p -c 20)\\n\",\"language\":\"bash\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\" SHA1_DATA=$(echo \\\"CRITICAL-DATA\\\" | openssl dgst -sha1 -binary | xxd -p -c 20)\\n\"}]}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"Similar to the previous step, this calculates the SHA-1 hash of the string \\\"CRITICAL-DATA\\\", converts it to binary, formats it as a hex string.\"}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"The result is stored in the variable SHA1_DATA.\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-bash\"],\"code\":\" SHA1_DATA = 39739bfcd59c10bc8b220398a4c868dbe41c455c\\n\",\"language\":\"bash\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\" SHA1_DATA = 39739bfcd59c10bc8b220398a4c868dbe41c455c\\n\"}]}]},{\"type\":\"element\",\"tag\":\"h1\",\"props\":{\"id\":\"_5-extend-pcr-0-1-and-2-with-the-calculated-hash-values\"},\"children\":[{\"type\":\"text\",\"value\":\"5. Extend PCR 0, 1, and 2 with the calculated hash values\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-bash\"],\"code\":\" tpm2_pcrextend 0:sha1=$SHA1_DATA,sha256=$SHA256_DATA -T mssim:host=localhost,port=2321\\n\\n tpm2_pcrextend 1:sha1=$SHA1_DATA,sha256=$SHA256_DATA -T mssim:host=localhost,port=2321 \\n\\n tpm2_pcrextend 2:sha1=$SHA1_DATA,sha256=$SHA256_DATA -T mssim:host=localhost,port=2321\\n\",\"language\":\"bash\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\" tpm2_pcrextend 0:sha1=$SHA1_DATA,sha256=$SHA256_DATA -T mssim:host=localhost,port=2321\\n\\n tpm2_pcrextend 1:sha1=$SHA1_DATA,sha256=$SHA256_DATA -T mssim:host=localhost,port=2321 \\n\\n tpm2_pcrextend 2:sha1=$SHA1_DATA,sha256=$SHA256_DATA -T mssim:host=localhost,port=2321\\n\"}]}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"This extends the values in PCR slots 0, 1, and 2 with the hash values calculated in the previous steps. \\\"Extending\\\" a PCR involves taking the current value of the PCR, concatenating the new hash value, and then hashing the entire string to create a new value for the PCR. This process ensures that the PCR values represent a cumulative hash of all extended values, providing a secure way to measure system state and changes.\"}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"In a real system like a computer for example each stage of the boot sequence would concateante the PCR, ensuring secure tracability of execution.\"}]},{\"type\":\"element\",\"tag\":\"h1\",\"props\":{\"id\":\"_6-read-the-pcr-values\"},\"children\":[{\"type\":\"text\",\"value\":\"6. Read the PCR values\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-bash\"],\"code\":\" tpm2_pcrread -T mssim:host=localhost,port=2321 sha1:0,1,2+sha256:0,1,2\\n\",\"language\":\"bash\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\" tpm2_pcrread -T mssim:host=localhost,port=2321 sha1:0,1,2+sha256:0,1,2\\n\"}]}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"Finally, this command reads the PCR values for slots 0, 1, and 2 using both SHA-1 and SHA-256 hashing algorithms to verify that they have been extended correctly with the calculated hash values.\"}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"This sequence of commands is essential for TPM management and operations, particularly in environments where security and system integrity are critical.\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-bash\"],\"code\":\"  sha1:\\n    0 : 0xA3EBF00F6520B2C85DBBF3D32B6A8B3A30ABB748\\n    1 : 0xA3EBF00F6520B2C85DBBF3D32B6A8B3A30ABB748\\n    2 : 0xA3EBF00F6520B2C85DBBF3D32B6A8B3A30ABB748\\n  sha256:\\n    0 : 0xAF42D77065F4791B6738DA5944E6B4074E3190F0993B5EE5D42DC4FBED424ABA\\n    1 : 0xAF42D77065F4791B6738DA5944E6B4074E3190F0993B5EE5D42DC4FBED424ABA\\n    2 : 0xAF42D77065F4791B6738DA5944E6B4074E3190F0993B5EE5D42DC4FBED424ABA\\n\",\"language\":\"bash\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\"  sha1:\\n    0 : 0xA3EBF00F6520B2C85DBBF3D32B6A8B3A30ABB748\\n    1 : 0xA3EBF00F6520B2C85DBBF3D32B6A8B3A30ABB748\\n    2 : 0xA3EBF00F6520B2C85DBBF3D32B6A8B3A30ABB748\\n  sha256:\\n    0 : 0xAF42D77065F4791B6738DA5944E6B4074E3190F0993B5EE5D42DC4FBED424ABA\\n    1 : 0xAF42D77065F4791B6738DA5944E6B4074E3190F0993B5EE5D42DC4FBED424ABA\\n    2 : 0xAF42D77065F4791B6738DA5944E6B4074E3190F0993B5EE5D42DC4FBED424ABA\\n\"}]}]}],\"toc\":{\"title\":\"\",\"searchDepth\":2,\"depth\":2,\"links\":[]}},\"_type\":\"markdown\",\"_id\":\"content:TPM.md\",\"_source\":\"content\",\"_file\":\"TPM.md\",\"_extension\":\"md\"},\"hash\":\"Dp1rKRrMqt\"}";

export { TPM as default };
//# sourceMappingURL=TPM.mjs.map
