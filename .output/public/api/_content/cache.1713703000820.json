{"generatedAt":1713703015650,"generateTime":276,"contents":[{"_path":"/detecting-bot-tweets-using-supervised-learning-and-meta-data-feature-sets","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Modeling an ml model for detecting bots in a social network","description":"Using logictic regression and RF","category":"ML","recommended":true,"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This model is based on the following paper:\n"},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=9358734","rel":["nofollow"]},"children":[{"type":"text","value":"https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=9358734"}]}]}]},{"type":"element","tag":"h1","props":{"id":"load-the-data"},"children":[{"type":"text","value":"Load the data"}]},{"type":"element","tag":"pre","props":{"code":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\n\ndata = pd.read_csv(\"datasets/twitter_human_bots_dataset.csv\")\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\n\ndata = pd.read_csv(\"datasets/twitter_human_bots_dataset.csv\")\n"}]}]},{"type":"element","tag":"h1","props":{"id":"drop-unnecessary-columns"},"children":[{"type":"text","value":"Drop unnecessary columns"}]},{"type":"element","tag":"pre","props":{"code":"columns_to_drop = [\"created_at\", \"description\", \"id\", \"default_profile_image\", \"profile_image_url\", \"screen_name\", \"profile_background_image_url\"]\ndata = data.drop(columns=columns_to_drop)\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"columns_to_drop = [\"created_at\", \"description\", \"id\", \"default_profile_image\", \"profile_image_url\", \"screen_name\", \"profile_background_image_url\"]\ndata = data.drop(columns=columns_to_drop)\n"}]}]},{"type":"element","tag":"h1","props":{"id":"label-encoding-for-account_type"},"children":[{"type":"text","value":"Label encoding for 'account_type'"}]},{"type":"element","tag":"pre","props":{"code":"label_encoder = LabelEncoder()\ndata['account_type'] = label_encoder.fit_transform(data['account_type'])\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"label_encoder = LabelEncoder()\ndata['account_type'] = label_encoder.fit_transform(data['account_type'])\n"}]}]},{"type":"element","tag":"h1","props":{"id":"woe-encoding-for-lang-and-location"},"children":[{"type":"text","value":"WoE encoding for 'lang' and 'location'"}]},{"type":"element","tag":"pre","props":{"code":"def calculate_woe(data, column, target_column):\n    woe_dict = {}\n    total_events = data[target_column].sum()\n    total_nonevents = data.shape[0] - total_events\n    \n    for category in data[column].unique():\n        events = data[(data[column] == category) & (data[target_column] == 1)].shape[0]\n        nonevents = data[(data[column] == category) & (data[target_column] == 0)].shape[0]\n        \n        if events == 0:\n            woe_value = -10  # Clip to a reasonable lower value\n        elif nonevents == 0:\n            woe_value = 10   # Clip to a reasonable upper value\n        else:\n            woe_value = np.log((nonevents / total_nonevents) / (events / total_events))\n            # Clip the WoE value to a reasonable range\n            woe_value = max(-10, min(10, woe_value))\n        \n        woe_dict[category] = woe_value\n    \n    return woe_dict\n\nwoe_lang = calculate_woe(data, 'lang', 'account_type')\nwoe_location = calculate_woe(data, 'location', 'account_type')\n\ndata['lang'] = data['lang'].map(woe_lang)\ndata['location'] = data['location'].map(woe_location)\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def calculate_woe(data, column, target_column):\n    woe_dict = {}\n    total_events = data[target_column].sum()\n    total_nonevents = data.shape[0] - total_events\n    \n    for category in data[column].unique():\n        events = data[(data[column] == category) & (data[target_column] == 1)].shape[0]\n        nonevents = data[(data[column] == category) & (data[target_column] == 0)].shape[0]\n        \n        if events == 0:\n            woe_value = -10  # Clip to a reasonable lower value\n        elif nonevents == 0:\n            woe_value = 10   # Clip to a reasonable upper value\n        else:\n            woe_value = np.log((nonevents / total_nonevents) / (events / total_events))\n            # Clip the WoE value to a reasonable range\n            woe_value = max(-10, min(10, woe_value))\n        \n        woe_dict[category] = woe_value\n    \n    return woe_dict\n\nwoe_lang = calculate_woe(data, 'lang', 'account_type')\nwoe_location = calculate_woe(data, 'location', 'account_type')\n\ndata['lang'] = data['lang'].map(woe_lang)\ndata['location'] = data['location'].map(woe_location)\n"}]}]},{"type":"element","tag":"h1","props":{"id":"feature-scaling"},"children":[{"type":"text","value":"Feature scaling"}]},{"type":"element","tag":"pre","props":{"code":"scaler = StandardScaler()\ndata[['friends_count', 'favourites_count']] = scaler.fit_transform(data[['friends_count', 'favourites_count']])\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"scaler = StandardScaler()\ndata[['friends_count', 'favourites_count']] = scaler.fit_transform(data[['friends_count', 'favourites_count']])\n"}]}]},{"type":"element","tag":"h1","props":{"id":"split-the-data-into-training-and-testing"},"children":[{"type":"text","value":"Split the data into training and testing"}]},{"type":"element","tag":"pre","props":{"code":"X = data.drop(columns=['account_type'])\ny = data['account_type']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"X = data.drop(columns=['account_type'])\ny = data['account_type']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"}]}]},{"type":"element","tag":"h1","props":{"id":"feature-selection-using-a-random-forest-model"},"children":[{"type":"text","value":"Feature selection using a Random Forest model"}]},{"type":"element","tag":"pre","props":{"code":"rf_model = RandomForestClassifier()\nrf_model.fit(X_train, y_train)\nmodel_feature_selector = SelectFromModel(rf_model, prefit=True)\n\nX_train_selected = model_feature_selector.transform(X_train)\nX_test_selected = model_feature_selector.transform(X_test)\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"rf_model = RandomForestClassifier()\nrf_model.fit(X_train, y_train)\nmodel_feature_selector = SelectFromModel(rf_model, prefit=True)\n\nX_train_selected = model_feature_selector.transform(X_train)\nX_test_selected = model_feature_selector.transform(X_test)\n"}]}]},{"type":"element","tag":"h1","props":{"id":"train-a-logistic-regression-model-predict-and-evaluate"},"children":[{"type":"text","value":"Train a logistic regression model, predict and evaluate"}]},{"type":"element","tag":"pre","props":{"code":"logistic_regression = LogisticRegression()\nlogistic_regression.fit(X_train_selected, y_train)\n\ny_pred = logistic_regression.predict(X_test_selected)\n\naccuracy_lr = accuracy_score(y_test, y_pred)\n\nprint(f'Accuracy: {accuracy_lr}')\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"logistic_regression = LogisticRegression()\nlogistic_regression.fit(X_train_selected, y_train)\n\ny_pred = logistic_regression.predict(X_test_selected)\n\naccuracy_lr = accuracy_score(y_test, y_pred)\n\nprint(f'Accuracy: {accuracy_lr}')\n"}]}]},{"type":"element","tag":"pre","props":{"code":"Accuracy: 0.671073717948718\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Accuracy: 0.671073717948718\n"}]}]},{"type":"element","tag":"h1","props":{"id":"train-a-random-forest-classifier-predict-and-evaluate"},"children":[{"type":"text","value":"Train a Random Forest classifier, predict and evaluate"}]},{"type":"element","tag":"pre","props":{"code":"rf_classifier = RandomForestClassifier()\nrf_classifier.fit(X_train_selected, y_train)\n\ny_pred = rf_classifier.predict(X_test_selected)\n\naccuracy_rf = accuracy_score(y_test, y_pred)\nprint(f'Accuracy: {accuracy_rf}')\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"rf_classifier = RandomForestClassifier()\nrf_classifier.fit(X_train_selected, y_train)\n\ny_pred = rf_classifier.predict(X_test_selected)\n\naccuracy_rf = accuracy_score(y_test, y_pred)\nprint(f'Accuracy: {accuracy_rf}')\n"}]}]},{"type":"element","tag":"pre","props":{"code":"Accuracy: 0.8880876068376068\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Accuracy: 0.8880876068376068\n"}]}]},{"type":"element","tag":"h1","props":{"id":"print-results"},"children":[{"type":"text","value":"Print results"}]},{"type":"element","tag":"pre","props":{"code":"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n\ndef display_scores(model_name, y_true, y_pred, y_prob):\n    accuracy = accuracy_score(y_true, y_pred)\n    precision = precision_score(y_true, y_pred)\n    recall = recall_score(y_true, y_pred)\n    f1 = f1_score(y_true, y_pred)\n    auc = roc_auc_score(y_true, y_prob)\n    \n    print(f\"Model: {model_name}\")\n    print(f\"Accuracy: {accuracy}\")\n    print(f\"Precision: {precision}\")\n    print(f\"Recall: {recall}\")\n    print(f\"F1 Score: {f1}\")\n    print(f\"AUC: {auc}\")\n    print(\"\")\n\ny_pred_lr = logistic_regression.predict(X_test_selected)\ny_prob_lr = logistic_regression.predict_proba(X_test_selected)[:, 1]\n\ny_pred_rf = rf_classifier.predict(X_test_selected)\ny_prob_rf = rf_classifier.predict_proba(X_test_selected)[:, 1]\n\ndisplay_scores(\"Logistic Regression\", y_test, y_pred_lr, y_prob_lr)\ndisplay_scores(\"Random Forest\", y_test, y_pred_rf, y_prob_rf)\n\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n\ndef display_scores(model_name, y_true, y_pred, y_prob):\n    accuracy = accuracy_score(y_true, y_pred)\n    precision = precision_score(y_true, y_pred)\n    recall = recall_score(y_true, y_pred)\n    f1 = f1_score(y_true, y_pred)\n    auc = roc_auc_score(y_true, y_prob)\n    \n    print(f\"Model: {model_name}\")\n    print(f\"Accuracy: {accuracy}\")\n    print(f\"Precision: {precision}\")\n    print(f\"Recall: {recall}\")\n    print(f\"F1 Score: {f1}\")\n    print(f\"AUC: {auc}\")\n    print(\"\")\n\ny_pred_lr = logistic_regression.predict(X_test_selected)\ny_prob_lr = logistic_regression.predict_proba(X_test_selected)[:, 1]\n\ny_pred_rf = rf_classifier.predict(X_test_selected)\ny_prob_rf = rf_classifier.predict_proba(X_test_selected)[:, 1]\n\ndisplay_scores(\"Logistic Regression\", y_test, y_pred_lr, y_prob_lr)\ndisplay_scores(\"Random Forest\", y_test, y_pred_rf, y_prob_rf)\n\n"}]}]},{"type":"element","tag":"pre","props":{"code":"Model: Logistic Regression\nAccuracy: 0.671073717948718\nPrecision: 0.6700616456714018\nRecall: 0.9998000399920016\nF1 Score: 0.8023750300890637\nAUC: 0.8060603400027674\n\nModel: Random Forest\nAccuracy: 0.8880876068376068\nPrecision: 0.9022222222222223\nRecall: 0.9336132773445311\nF1 Score: 0.9176493710691824\nAUC: 0.9458598831098275\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Model: Logistic Regression\nAccuracy: 0.671073717948718\nPrecision: 0.6700616456714018\nRecall: 0.9998000399920016\nF1 Score: 0.8023750300890637\nAUC: 0.8060603400027674\n\nModel: Random Forest\nAccuracy: 0.8880876068376068\nPrecision: 0.9022222222222223\nRecall: 0.9336132773445311\nF1 Score: 0.9176493710691824\nAUC: 0.9458598831098275\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:Detecting bot tweets using supervised learning and meta data feature sets.md","_source":"content","_file":"Detecting bot tweets using supervised learning and meta data feature sets.md","_extension":"md"},{"_path":"/hello","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"About me","description":"Hello there","category":"Random","recommended":true,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"hello"},"children":[{"type":"text","value":"Hello!"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"img","props":{"src":"/img/a.png","alt":"self portrait","width":300,"height":"auto"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"My name is Danny Martinez and I'm currently in my final year at the University of Southampton studying computer science."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I love engineering and problem solving for real and applicable problems that make an impact!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"On this website you can find a bunch of experiments/studies of different computer topics I'm interested in!"}]},{"type":"element","tag":"h1","props":{"id":"my-socials"},"children":[{"type":"text","value":"My Socials"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Linkedin"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"> "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.linkedin.com/in/danny-martinez-066439256/","rel":["nofollow"]},"children":[{"type":"text","value":"https://www.linkedin.com/in/danny-martinez-066439256/"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Github"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"> "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/dmh1g19","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/dmh1g19"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:hello.md","_source":"content","_file":"hello.md","_extension":"md"},{"_path":"/pyshics-test","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Simple physics simulation using Box2D","description":"Box2D + SDL2 + GLUT + OpenGL","category":"Physics","recommended":true,"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"What we're making:"}]},{"type":"element","tag":"img","props":{"src":"/img/test.gif","alt":"self portrait","width":500},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This uses an old openGL pipeline - not to be repeated! :)"}]},{"type":"element","tag":"pre","props":{"className":["language-C++"],"code":"#include <iostream>\n#include <SDL2/SDL.h>\n#include <SDL2/SDL_image.h>\n#include <GL/gl.h>\n#include <GL/glu.h>\n#include \"./box2d/include/box2d/box2d.h\"\n\nconst int WIDTH=640;\nconst int HEIGHT=480;\nconst float M2P=20;\nconst float P2M=1/M2P;\nb2World* world;\n\nb2Body* addRect(int x,int y,int w,int h,bool dyn=true)\n{\n   b2BodyDef bodydef;\n   bodydef.position.Set(x*P2M,y*P2M);\n   if(dyn)\n      bodydef.type=b2_dynamicBody;\n   b2Body* body=world->CreateBody(&bodydef);\n    \n   b2PolygonShape shape;\n   shape.SetAsBox(P2M*w/2,P2M*h/2);\n   \n   b2FixtureDef fixturedef;\n   fixturedef.shape=&shape;\n   fixturedef.density=1.0;\n   body->CreateFixture(&fixturedef);\n}\n\nvoid drawSquare(b2Vec2* points,b2Vec2 center,float angle)\n{\n    glColor3f(1,1,1);\n    glPushMatrix();\n        glTranslatef(center.x*M2P,center.y*M2P,0);\n        glRotatef(angle*180.0/M_PI,0,0,1);\n        glBegin(GL_QUADS);\n            for(int i=0;i<4;i++)\n                glVertex2f(points[i].x*M2P,points[i].y*M2P);\n        glEnd();\n    glPopMatrix();\n}\n\nvoid init()\n{\n    glMatrixMode(GL_PROJECTION);\n        glOrtho(0,WIDTH,HEIGHT,0,-1,1);\n    glMatrixMode(GL_MODELVIEW);\n    glClearColor(0,0,0,1);\n    world=new b2World(b2Vec2(0.0,9.81));\n    addRect(WIDTH/2,HEIGHT-50,WIDTH,30,false);\n}\n\nvoid display()\n{\n   glClear(GL_COLOR_BUFFER_BIT);\n   glLoadIdentity();\n   b2Body* tmp=world->GetBodyList();\n   b2Vec2 points[4];\n   while(tmp)\n   {\n      for(int i=0;i<4;i++)\n         points[i]=((b2PolygonShape*)tmp->GetFixtureList()->GetShape())->m_vertices[i];\n      drawSquare(points,tmp->GetWorldCenter(),tmp->GetAngle());\n      tmp=tmp->GetNext();\n   }\n}\n\nint main(int argc,char** argv)\n{\n    SDL_Init(SDL_INIT_EVERYTHING);\n    //SDL_SetVideoMode(640,480,32,SDL_OPENGL);\n    SDL_Window *window = SDL_CreateWindow(\"My window\",0,0,640,480,SDL_WINDOW_OPENGL);\n    SDL_GLContext glcontext = SDL_GL_CreateContext(window);\n    Uint32 start;\n    SDL_Event event;\n    bool running=true;\n    init();\n    while(running)\n    {\n        start=SDL_GetTicks();\n        while(SDL_PollEvent(&event))\n        {\n            switch(event.type)\n            {\n                case SDL_QUIT:\n                    running=false;\n                    break;\n                case SDL_KEYDOWN:\n                    switch(event.key.keysym.sym)\n                    {\n                        case SDLK_ESCAPE:\n                            running=false;\n                            break;\n                    }\n                    break;\n                case SDL_MOUSEBUTTONDOWN:\n                    addRect(event.button.x,event.button.y,20,20,true);\n                    break;\n            }\n        }\n        display();\n        world->Step(1.0/30.0,8,3);  //update\n        SDL_GL_SwapWindow(window);\n        if(1000.0/30>SDL_GetTicks()-start)\n            SDL_Delay(1000.0/30-(SDL_GetTicks()-start));\n    }\n    SDL_Quit();\n}\n","language":"C++","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"#include <iostream>\n#include <SDL2/SDL.h>\n#include <SDL2/SDL_image.h>\n#include <GL/gl.h>\n#include <GL/glu.h>\n#include \"./box2d/include/box2d/box2d.h\"\n\nconst int WIDTH=640;\nconst int HEIGHT=480;\nconst float M2P=20;\nconst float P2M=1/M2P;\nb2World* world;\n\nb2Body* addRect(int x,int y,int w,int h,bool dyn=true)\n{\n   b2BodyDef bodydef;\n   bodydef.position.Set(x*P2M,y*P2M);\n   if(dyn)\n      bodydef.type=b2_dynamicBody;\n   b2Body* body=world->CreateBody(&bodydef);\n    \n   b2PolygonShape shape;\n   shape.SetAsBox(P2M*w/2,P2M*h/2);\n   \n   b2FixtureDef fixturedef;\n   fixturedef.shape=&shape;\n   fixturedef.density=1.0;\n   body->CreateFixture(&fixturedef);\n}\n\nvoid drawSquare(b2Vec2* points,b2Vec2 center,float angle)\n{\n    glColor3f(1,1,1);\n    glPushMatrix();\n        glTranslatef(center.x*M2P,center.y*M2P,0);\n        glRotatef(angle*180.0/M_PI,0,0,1);\n        glBegin(GL_QUADS);\n            for(int i=0;i<4;i++)\n                glVertex2f(points[i].x*M2P,points[i].y*M2P);\n        glEnd();\n    glPopMatrix();\n}\n\nvoid init()\n{\n    glMatrixMode(GL_PROJECTION);\n        glOrtho(0,WIDTH,HEIGHT,0,-1,1);\n    glMatrixMode(GL_MODELVIEW);\n    glClearColor(0,0,0,1);\n    world=new b2World(b2Vec2(0.0,9.81));\n    addRect(WIDTH/2,HEIGHT-50,WIDTH,30,false);\n}\n\nvoid display()\n{\n   glClear(GL_COLOR_BUFFER_BIT);\n   glLoadIdentity();\n   b2Body* tmp=world->GetBodyList();\n   b2Vec2 points[4];\n   while(tmp)\n   {\n      for(int i=0;i<4;i++)\n         points[i]=((b2PolygonShape*)tmp->GetFixtureList()->GetShape())->m_vertices[i];\n      drawSquare(points,tmp->GetWorldCenter(),tmp->GetAngle());\n      tmp=tmp->GetNext();\n   }\n}\n\nint main(int argc,char** argv)\n{\n    SDL_Init(SDL_INIT_EVERYTHING);\n    //SDL_SetVideoMode(640,480,32,SDL_OPENGL);\n    SDL_Window *window = SDL_CreateWindow(\"My window\",0,0,640,480,SDL_WINDOW_OPENGL);\n    SDL_GLContext glcontext = SDL_GL_CreateContext(window);\n    Uint32 start;\n    SDL_Event event;\n    bool running=true;\n    init();\n    while(running)\n    {\n        start=SDL_GetTicks();\n        while(SDL_PollEvent(&event))\n        {\n            switch(event.type)\n            {\n                case SDL_QUIT:\n                    running=false;\n                    break;\n                case SDL_KEYDOWN:\n                    switch(event.key.keysym.sym)\n                    {\n                        case SDLK_ESCAPE:\n                            running=false;\n                            break;\n                    }\n                    break;\n                case SDL_MOUSEBUTTONDOWN:\n                    addRect(event.button.x,event.button.y,20,20,true);\n                    break;\n            }\n        }\n        display();\n        world->Step(1.0/30.0,8,3);  //update\n        SDL_GL_SwapWindow(window);\n        if(1000.0/30>SDL_GetTicks()-start)\n            SDL_Delay(1000.0/30-(SDL_GetTicks()-start));\n    }\n    SDL_Quit();\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:pyshics-test.md","_source":"content","_file":"pyshics-test.md","_extension":"md"},{"_path":"/rt-databases","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Database operations in a real time system","description":"Multi threading and scaling!","category":"RT","recommended":true,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"rt-databases"},"children":[{"type":"text","value":"RT databases"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The main topics covered include:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Storing real-time entity state in a database"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Improving and optimising code to reduce dcomputer"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Running multiple tasks interacting through a real-time database"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Measuring and characterising jitter with multiple tasks"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The implementation has been simplified and abstracted so that it can run in a standard laptop or desktop platform. This somewhat disconnects it from reality, but is necessary in order to avoid substantial overhead due to installing libraries or forcing exactly one platform."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lets make a 'naive' database system for a realtime system no optimization and an optimized version. We can comapre the two and discus their differences."}]},{"type":"element","tag":"h1","props":{"id":"a-naive-vs-efficient-implementation"},"children":[{"type":"text","value":"A naive vs efficient implementation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A simple and naive implementation of a database where "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"O(Num of accessess * Number of keys)"}]},{"type":"text","value":"\nand doesnt have any multi-threading capabilities."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This version simply uses a vector (much slower than something like a hashmap)"}]},{"type":"element","tag":"pre","props":{"className":["language-C++"],"code":"private:\nstruct entry {\n    std::string name;\n    std::vector<char> data;\n};\n\nstd::vector<entry> entries;\n\npublic:\nstd::string GetName() const override { \n    return \"naive\";\n}\n\nbool IsThreadSafe() const override { \n    return false;\n}\n\nintptr_t Register(const char *name, size_t size) override {\n    for(auto &e : entries){\n        if(e.name==name){\n            assert(e.data.size() == size);\n            return 0;\n        }\n    }\n    entries.push_back({ name, std::vector<char>(size, 0) });\n    return 0;\n}\n\nvoid Read(const char *name, intptr_t token, size_t size, void *data) override\n{\n    for(auto &e : entries){\n        if(e.name==name){\n            assert(e.data.size()==size);\n            memcpy(data, &e.data[0], size);\n            return;\n        }\n    }\n    memset(data, 0, size);\n}\n\nvoid Write(const char *name, intptr_t token, size_t size, const void *data) override {\n    for(auto &e : entries){\n        if(e.name==name){\n            assert(e.data.size()==size);\n            memcpy(&e.data[0], data, size);\n            return;\n        }\n    }\n    entries.push_back({ name, std::vector<char>(size, 0) });\n    memcpy(&entries.back().data[0], data, size);\n}\n","language":"C++","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"private:\nstruct entry {\n    std::string name;\n    std::vector<char> data;\n};\n\nstd::vector<entry> entries;\n\npublic:\nstd::string GetName() const override { \n    return \"naive\";\n}\n\nbool IsThreadSafe() const override { \n    return false;\n}\n\nintptr_t Register(const char *name, size_t size) override {\n    for(auto &e : entries){\n        if(e.name==name){\n            assert(e.data.size() == size);\n            return 0;\n        }\n    }\n    entries.push_back({ name, std::vector<char>(size, 0) });\n    return 0;\n}\n\nvoid Read(const char *name, intptr_t token, size_t size, void *data) override\n{\n    for(auto &e : entries){\n        if(e.name==name){\n            assert(e.data.size()==size);\n            memcpy(data, &e.data[0], size);\n            return;\n        }\n    }\n    memset(data, 0, size);\n}\n\nvoid Write(const char *name, intptr_t token, size_t size, const void *data) override {\n    for(auto &e : entries){\n        if(e.name==name){\n            assert(e.data.size()==size);\n            memcpy(&e.data[0], data, size);\n            return;\n        }\n    }\n    entries.push_back({ name, std::vector<char>(size, 0) });\n    memcpy(&entries.back().data[0], data, size);\n}\n"}]}]},{"type":"element","tag":"h1","props":{"id":"efficient-version-using-a-hashmap"},"children":[{"type":"text","value":"Efficient version using a hashmap"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lets implement a more efficient version this implementation uses a hasmhmap "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"O(1) insertion"}]},{"type":"text","value":" making it much faster at "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"O(Number of accesses)"}]},{"type":"text","value":" but doesn't have any multi-threading capabilities."}]},{"type":"element","tag":"pre","props":{"className":["language-C++"],"code":"private:\nstd::unordered_map<std::string, std::vector<char>> entries;\n\npublic:\nstd::string GetName() const override { \n    return \"efficient\";\n}\n\nbool IsThreadSafe() const override { \n    return false;\n}\n\nintptr_t Register(const char *name, size_t size) override {\n    entries[name] = std::vector<char>(size, 0);\n    return 0;\n}\n\nvoid Read(const char *name, intptr_t token, size_t size, void *data) override {\n    auto it = entries.find(name);\n    if (it != entries.end()) {\n        assert(it->second.size() == size);\n        memcpy(data, &it->second[0], size);\n    } else {\n        memset(data, 0, size);\n    }\n}\n\nvoid Write(const char *name, intptr_t token, size_t size, const void *data) override {\n    auto it = entries.find(name);\n    if (it != entries.end()) {\n        assert(it->second.size() == size);\n        memcpy(&it->second[0], data, size);\n    } else {\n        entries[name] = std::vector<char>(size, 0);\n        memcpy(&entries[name][0], data, size);\n    }\n}\n","language":"C++","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"private:\nstd::unordered_map<std::string, std::vector<char>> entries;\n\npublic:\nstd::string GetName() const override { \n    return \"efficient\";\n}\n\nbool IsThreadSafe() const override { \n    return false;\n}\n\nintptr_t Register(const char *name, size_t size) override {\n    entries[name] = std::vector<char>(size, 0);\n    return 0;\n}\n\nvoid Read(const char *name, intptr_t token, size_t size, void *data) override {\n    auto it = entries.find(name);\n    if (it != entries.end()) {\n        assert(it->second.size() == size);\n        memcpy(data, &it->second[0], size);\n    } else {\n        memset(data, 0, size);\n    }\n}\n\nvoid Write(const char *name, intptr_t token, size_t size, const void *data) override {\n    auto it = entries.find(name);\n    if (it != entries.end()) {\n        assert(it->second.size() == size);\n        memcpy(&it->second[0], data, size);\n    } else {\n        entries[name] = std::vector<char>(size, 0);\n        memcpy(&entries[name][0], data, size);\n    }\n}\n"}]}]},{"type":"element","tag":"h1","props":{"id":"naive-vs-efficient-results"},"children":[{"type":"text","value":"Naive vs efficient results"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The naive implementation has WallTime = O(NumAccesses * NumKeys). So if you double the number of updates\nexecution time doubles (as expected), and if you double the number keys the execution time also doubles (which is bad)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lets run the naive and efficient engine with 1000 accesses, 10 keys, and 1 thread."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"By swapping to a hasmap we have incrased the time efficiency substantially. Our system is currently not thread safe."}]},{"type":"element","tag":"img","props":{"src":"/img/1.3-efficient.png","width":600},"children":[]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n# Multi-threaded, scalable and efficient\n"},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lets make it multi-threaded and efficient in relation to number of accesses on the database and number of threads running a process!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We achieve a scalable solution with the use of fine grained locks for each key, quite efficient and scalable, depending on CPU."}]},{"type":"element","tag":"pre","props":{"className":["language-C++"],"code":"private:\nstd::unordered_map<std::string, std::vector<char>> entries;\nstd::unordered_map<std::string, std::shared_mutex> locks;\n\npublic:\nstd::string GetName() const override {\n    return \"scalable\";\n}\n\nbool IsThreadSafe() const {\n    return true;\n}\n\nintptr_t Register(const char* name, size_t size) override {\n    std::unique_lock lock(locks[name]);\n    auto it = entries.find(name);\n    if (it != entries.end()) {\n        return 0;\n    }\n    entries[name] = std::vector<char>(size, 0);\n    return entries[name][0];\n}\n\nvoid Read(const char* name, intptr_t token, size_t size, void* data) override {\n    std::shared_lock lock(locks[name]);\n    if (token != 0) {\n        memcpy(data, &token, size);\n    } else {\n        auto search = entries.find(name);\n        if (search != entries.end()) {\n            memcpy(data, &search->second[0], size);\n        }\n    }\n}\n\nvoid Write(const char* name, intptr_t token, size_t size, const void* data) override {\n    std::unique_lock lock(locks[name]); \n    if (token != 0) {\n        memcpy(&token, data, size);\n    } else {\n        auto search = entries.find(name);\n        if (search != entries.end()) {\n            memcpy(&search->second[0], data, size);\n        }\n    }\n}\n","language":"C++","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"private:\nstd::unordered_map<std::string, std::vector<char>> entries;\nstd::unordered_map<std::string, std::shared_mutex> locks;\n\npublic:\nstd::string GetName() const override {\n    return \"scalable\";\n}\n\nbool IsThreadSafe() const {\n    return true;\n}\n\nintptr_t Register(const char* name, size_t size) override {\n    std::unique_lock lock(locks[name]);\n    auto it = entries.find(name);\n    if (it != entries.end()) {\n        return 0;\n    }\n    entries[name] = std::vector<char>(size, 0);\n    return entries[name][0];\n}\n\nvoid Read(const char* name, intptr_t token, size_t size, void* data) override {\n    std::shared_lock lock(locks[name]);\n    if (token != 0) {\n        memcpy(data, &token, size);\n    } else {\n        auto search = entries.find(name);\n        if (search != entries.end()) {\n            memcpy(data, &search->second[0], size);\n        }\n    }\n}\n\nvoid Write(const char* name, intptr_t token, size_t size, const void* data) override {\n    std::unique_lock lock(locks[name]); \n    if (token != 0) {\n        memcpy(&token, data, size);\n    } else {\n        auto search = entries.find(name);\n        if (search != entries.end()) {\n            memcpy(&search->second[0], data, size);\n        }\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We can see from the graph below, the number of accesses is linear with wall time!"}]},{"type":"element","tag":"img","props":{"src":"/img/1.5-scalabe.png","width":600},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We can also observe that WallTime is "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"O(1/NumThreads)"}]},{"type":"text","value":" for number of threads, my computer is very bad - but with some better hardware this curve would look far better!"}]},{"type":"element","tag":"h1","props":{"id":"data-summary-of-operations-on-the-databses-weve-made"},"children":[{"type":"text","value":"Data summary of operations on the databses we've made"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"img","props":{"src":"/img/1.7.png","width":600},"children":[]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"img","props":{"src":"/img/2.1.png","width":600},"children":[]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"img","props":{"src":"/img/2.2.png","width":600},"children":[]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"img","props":{"src":"/img/2.3.png","width":600},"children":[]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"img","props":{"src":"/img/2.5.png","width":600},"children":[]},{"type":"element","tag":"br","props":{},"children":[]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:rt-databases.md","_source":"content","_file":"rt-databases.md","_extension":"md"},{"_path":"/rt-scheduling-tests","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Dynamic scheduling visualization with Cheddar","description":"Lets get a visual perspective and implement some code!","category":"RT","recommended":true,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"scheduling-algorithms"},"children":[{"type":"text","value":"Scheduling algorithms"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Welcome to this Scheduling Tutorial! I have talked about scheduling methods in the past, in this post we will be looking more in depth at some algorithms and implement one at the end!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I will be using 'cheddar' which is program for visualizing hyper frames:\n"},{"type":"element","tag":"em","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://beru.univ-brest.fr/cheddar/","rel":["nofollow"]},"children":[{"type":"text","value":"http://beru.univ-brest.fr/cheddar/"}]}]}]},{"type":"element","tag":"h1","props":{"id":"rms-vs-edf-scheduling-algorithms"},"children":[{"type":"text","value":"RMS vs EDF scheduling algorithms"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lets create a Monotonic (pre-emptive fixed priority scheduler) with the following tasks:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Task T1: Capacity = 2, Deadline = 4, Period = 4, Start Time = 0"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Task T2: Capacity = 5, Deadline = 10, Period = 10, Start Time = 0"}]},{"type":"element","tag":"h2","props":{"id":"rms-rate-monotonic-scheduling"},"children":[{"type":"text","value":"RMS (Rate-monotonic scheduling)"}]},{"type":"element","tag":"img","props":{"src":"/img/1_RMS.png","width":600,"height":180},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"RMS is an algorithm for managing the priority of static tasks, jobs with a shorter cycle duration are assigned a higher pirority, shortest duration jobs having the highest."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Using this method, T2 misses it's deadline at 11 and cannot execute fully in time. This is an example of how RMS does not work for the given the task paramters. Lets try EDF next."}]},{"type":"element","tag":"h2","props":{"id":"edf-earliest-deadline-first"},"children":[{"type":"text","value":"EDF (Earliest deadline first)"}]},{"type":"element","tag":"img","props":{"src":"/img/1_EDF.png","width":600,"height":160},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When using EDF we see this issue is fixed, both tasks are capable of executing given their constraints - the system containts the same amount of context switches and overall performance!"}]},{"type":"element","tag":"h1","props":{"id":"edf-vs-llf-scheduling-algorithms"},"children":[{"type":"text","value":"EDF vs LLF scheduling algorithms"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Given the following task:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Task T1: Capacity = 3, Deadline = 9, Period = 9, Start Time = 0"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Task T2: Capacity = 4, Deadline = 8, Period = 8, Start Time = 0"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lets compare EDF with LLF."}]},{"type":"element","tag":"h2","props":{"id":"edf-earliest-deadline-first-1"},"children":[{"type":"text","value":"EDF (Earliest deadline first)"}]},{"type":"element","tag":"img","props":{"src":"/img/2_EDF.png","width":600,"height":160},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"With EDF, no deadlines are missed but notice the difference in context switches."}]},{"type":"element","tag":"h2","props":{"id":"llf-least-laxity-first"},"children":[{"type":"text","value":"LLF (Least laxity first)"}]},{"type":"element","tag":"h2","props":{"id":"laxity-dealine-current-time-remaining-processing-time"},"children":[{"type":"text","value":"Laxity = dealine - (current time + remaining processing time)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The task with the least laxity is given the highest priority for execution. This is a preeptive algorith which means a running task can be preempted (interrupted) by another task with a higher priority."}]},{"type":"element","tag":"img","props":{"src":"/img/2_LLF.png","width":600,"height":160},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Least laxity first shows a great amount of task switching and introduces 18 preemptions. We can see from the diagram that this approach is quite computationally intensive."}]},{"type":"element","tag":"h1","props":{"id":"nap-vs-pip-scheduling-algorithms"},"children":[{"type":"text","value":"NAP vs PIP scheduling algorithms"}]},{"type":"element","tag":"h2","props":{"id":"lets-introduce-some-resources-for-focus-on-resource-access-and-management"},"children":[{"type":"text","value":"Lets introduce some resources for focus on resource access and management"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We will use mutexes to appropriately manage access (mutex free methods are often used but are much more difficutl to implement and are used in a case by case basis)."}]},{"type":"element","tag":"h2","props":{"id":"no-access-control"},"children":[{"type":"text","value":"No access control"}]},{"type":"element","tag":"img","props":{"src":"/img/3_NAP.png","width":600,"height":160},"children":[]},{"type":"element","tag":"h2","props":{"id":"priority-inversion"},"children":[{"type":"text","value":"Priority inversion"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"From the diagram we can see a new timeline (resource S) indicating when a lock is gained (blue block) and released (red block). Due to incorrect resource control we can see that task 1 misses its deadline in its second period. This is because Task 1 is preempted by Task 2 - this is known as "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"priority inversion"}]},{"type":"text","value":". Task 2 is a lower priority task but holds the lock for the shared resource that a higher priority task (task 1) needs. We need a way to manage resource access so tasks are not waiting for accesses and being missed."}]},{"type":"element","tag":"h2","props":{"id":"access-control-using-pip-priority-inheritance-protocol"},"children":[{"type":"text","value":"Access control using PIP (Priority inheritance protocol)"}]},{"type":"element","tag":"img","props":{"src":"/img/3_PIP.png","width":600,"height":160},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The diagram above shows PIP introducing an extra context switch to successfully complete the execution of all tasks for their hyper period. The priority inversion has been prevented!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When a high-priority task is blocked because a lower-priority task holds a resource it needs, the lower-priority task \"inherits\" the higher priority of the blocking task. This temporary priority boost helps the lower-priority task to complete its use of the shared resource more quickly, thereby reducing the waiting time for the higher-priority task. Once the lower-priority task releases the resource, it reverts to its original priority."}]},{"type":"element","tag":"h1","props":{"id":"pip-deadlock-condition-and-pcp"},"children":[{"type":"text","value":"PIP deadlock condition and PCP"}]},{"type":"element","tag":"h2","props":{"id":"dead-lock"},"children":[{"type":"text","value":"Dead lock"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We must watchout for deadlocks when using PIP"}]},{"type":"element","tag":"h2","props":{"id":"pip-deadlock"},"children":[{"type":"text","value":"PIP deadlock"}]},{"type":"element","tag":"img","props":{"src":"/img/4_PIP_dead.png","width":600,"height":160},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Figure above showcases a deadlock bweteen two tasks are they both wait for the other to release a lock for a shared resource"}]},{"type":"element","tag":"h2","props":{"id":"pcp"},"children":[{"type":"text","value":"PCP"}]},{"type":"element","tag":"img","props":{"src":"/img/4_PCP.png","width":600,"height":160},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lets use PCP to prevent the deadlock as per the above"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"rms-rate-monotonic-scheduling","depth":2,"text":"RMS (Rate-monotonic scheduling)"},{"id":"edf-earliest-deadline-first","depth":2,"text":"EDF (Earliest deadline first)"},{"id":"edf-earliest-deadline-first-1","depth":2,"text":"EDF (Earliest deadline first)"},{"id":"llf-least-laxity-first","depth":2,"text":"LLF (Least laxity first)"},{"id":"laxity-dealine-current-time-remaining-processing-time","depth":2,"text":"Laxity = dealine - (current time + remaining processing time)"},{"id":"lets-introduce-some-resources-for-focus-on-resource-access-and-management","depth":2,"text":"Lets introduce some resources for focus on resource access and management"},{"id":"no-access-control","depth":2,"text":"No access control"},{"id":"priority-inversion","depth":2,"text":"Priority inversion"},{"id":"access-control-using-pip-priority-inheritance-protocol","depth":2,"text":"Access control using PIP (Priority inheritance protocol)"},{"id":"dead-lock","depth":2,"text":"Dead lock"},{"id":"pip-deadlock","depth":2,"text":"PIP deadlock"},{"id":"pcp","depth":2,"text":"PCP"}]}},"_type":"markdown","_id":"content:rt-scheduling-tests.md","_source":"content","_file":"rt-scheduling-tests.md","_extension":"md"},{"_path":"/rt-scheduling","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Real-time system scheduling overview","description":"Exploring scheduling algorithms for real time systems!","category":"RT","recommended":true,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"tasks-timelines-and-processes"},"children":[{"type":"text","value":"Tasks, timelines and processes"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"One of the first stepping stones in the design of real time systems is scheduling!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this post I will discuss my research and experiments in the world of scheduling, I will go through the main algorithms, terminology and showcasing some implementations and results!"}]},{"type":"element","tag":"h1","props":{"id":"visual-representation"},"children":[{"type":"text","value":"Visual representation"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"img","props":{"src":"/img/timeline.png","alt":"self portrait","width":600,"height":"auto"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Above is a diagram of a 'hyper-frame', a hyper-frame is a fixed, repeating period in which all the tasks of a real-time system must be executed. We can populate this hyperframe with 'tasks', tasks have a set of temporal parameters."}]},{"type":"element","tag":"h1","props":{"id":"types-of-tasks"},"children":[{"type":"text","value":"Types of tasks"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Tasks need 'processors', a processor can be a CPU, network, disk or critical section. These are general parameters, they may change based on the type of task."}]},{"type":"element","tag":"h3","props":{"id":"periodic"},"children":[{"type":"text","value":"Periodic"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Repeated tasks, hard dealines, time driven"}]},{"type":"element","tag":"h3","props":{"id":"aperiodic"},"children":[{"type":"text","value":"Aperiodic"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"One shot, soft deadline, event driven"}]},{"type":"element","tag":"h3","props":{"id":"sporadic"},"children":[{"type":"text","value":"Sporadic"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Event driven, hard deadline"}]},{"type":"element","tag":"h1","props":{"id":"temporal-parameters"},"children":[{"type":"text","value":"Temporal parameters"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"i = The current task"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Task (T_i): A sequential piece of code performing some action"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Release time of a task (r_i): The time instant the task becomes ready to execute."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Deadline of a task (d_i): The time instant by which the task must complete execution."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Execution Time (e_i): Time to complete a task (alone and has all resources)."}]},{"type":"element","tag":"h1","props":{"id":"task-specific-functional-parameters"},"children":[{"type":"text","value":"Task Specific Functional Parameters"}]},{"type":"element","tag":"h2","props":{"id":"criticality"},"children":[{"type":"text","value":"Criticality"}]},{"type":"text","value":"\nPriority of a task.\n"},{"type":"element","tag":"h2","props":{"id":"preemptivity"},"children":[{"type":"text","value":"Preemptivity"}]},{"type":"text","value":"\nCan the task be interrupted?\n"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"h1","props":{"id":"task-states"},"children":[{"type":"text","value":"Task states"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"img","props":{"src":"/img/task-states.png","alt":"self portrait","width":600,"height":"auto"},"children":[]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"h1","props":{"id":"scheduling"},"children":[{"type":"text","value":"Scheduling"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now that we have looked at some terminology, hyper-frames and tasks; lets go ahead and start looking at scheduling."}]},{"type":"element","tag":"h1","props":{"id":"two-kinds-of-algorithms"},"children":[{"type":"text","value":"Two kinds of algorithms"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A scheduler or scheduling algorithm, which generates a schedule\nat runtime/offline."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A feasibility analysis algorithm, which checks if timing constraints\nare met."}]}]},{"type":"element","tag":"img","props":{"src":"/img/schedule-algo.png","alt":"self portrait","width":600,"height":"auto"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Set S of n tasks"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"set P of p processors"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Set R of r resources"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We find an assignment of P and R to S that produces a feasible schedule under a set of constraints."}]},{"type":"element","tag":"h1","props":{"id":"types-of-scheduling"},"children":[{"type":"text","value":"Types of scheduling"}]},{"type":"element","tag":"h2","props":{"id":"static"},"children":[{"type":"text","value":"Static"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"offline or clock drive"}]},{"type":"element","tag":"h2","props":{"id":"dynamic"},"children":[{"type":"text","value":"Dynamic"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"online or priority driven (static or dynamic priority)"}]},{"type":"element","tag":"img","props":{"src":"/img/static-example.png","alt":"self portrait","width":600,"height":"auto"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here is an example of two possible static schedules of 3 tasks s.t:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"T_1 = (4,1)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"T_2 = (6,1)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"T_3 = (12,2)"}]},{"type":"element","tag":"h1","props":{"id":"scheduling-aperiodic-tasks-irregular-tasks"},"children":[{"type":"text","value":"Scheduling aperiodic tasks (irregular tasks)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We've looked at scheduling periodic tasks, lets look at aperiodic tasks now. A common way in dealing with aperiodic tasks is to use "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"slack stealing"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Aperiodic task only execute when the sporadic task queue is\nempty."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Follow a FIFO order."}]},{"type":"element","tag":"h1","props":{"id":"slack-stealing"},"children":[{"type":"text","value":"Slack stealing"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"img","props":{"src":"/img/a-periodic.png","alt":"self portrait","width":600,"height":"auto"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A hyper-frame with periodic tasks, notice the free gaps available for aperiodic tasks."}]},{"type":"element","tag":"img","props":{"src":"/img/b-aperiodic.png","alt":"self portrait","width":600,"height":"auto"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A hyper-frame with aperiodic tasks, lets add the aperiodic taks to the periodic hyper-frame."}]},{"type":"element","tag":"img","props":{"src":"/img/c-periodic-and-aperiodic-simple.png","alt":"self portrait","width":600,"height":"auto"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is a naive way of doing it, it works but is not efficient."}]},{"type":"element","tag":"img","props":{"src":"/img/d-aperiodic-and-periodic-stack-stealing.png","alt":"self portrait","width":600,"height":"auto"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This uses "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"slack stealing"}]},{"type":"text","value":" by using free spaces, notice how the aperiodic task finishes sooner."}]},{"type":"element","tag":"h1","props":{"id":"scheduling-sporadic-tasks"},"children":[{"type":"text","value":"Scheduling sporadic tasks"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Sporadic tasks have a hard dead line and appear are arbitrary times."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When one of these tasks arrives, the system must first perform an acceptance test to make sure it can be completed by its deadline, if not then the system has failed."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Follow a EDF (earliest deadline first) order."}]},{"type":"element","tag":"img","props":{"src":"/img/tasks-diagram.png","alt":"self portrait","width":600,"height":"auto"},"children":[]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"br","props":{},"children":[]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"periodic","depth":3,"text":"Periodic"},{"id":"aperiodic","depth":3,"text":"Aperiodic"},{"id":"sporadic","depth":3,"text":"Sporadic"},{"id":"criticality","depth":2,"text":"Criticality"},{"id":"preemptivity","depth":2,"text":"Preemptivity"},{"id":"static","depth":2,"text":"Static"},{"id":"dynamic","depth":2,"text":"Dynamic"}]}},"_type":"markdown","_id":"content:rt-scheduling.md","_source":"content","_file":"rt-scheduling.md","_extension":"md"},{"_path":"/tpm","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Exploring the Trusted Platform Module (TPM)","description":"the most popular root of trust method for most computers","category":"Sec ops","recommended":true,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"what-is-a-tpm"},"children":[{"type":"text","value":"What is a TPM?"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"img","props":{"src":"/img/tpm.webp","alt":"tmp chip","width":400},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A Trusted Platform Module (TPM) is commonly used as a root of trust in many computers. A TPM is a specialized chip on an endpoint device that is designed to secure hardware through integrated cryptographic keys. Its primary purpose is to safeguard the system by integrating cryptographic keys into devices."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The TPM can be used for various security operations such as disk encryption, secure boot, and hardware-based authentication."}]},{"type":"element","tag":"h1","props":{"id":"_1-start-the-chip"},"children":[{"type":"text","value":"1. Start the chip"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":" tpm2_startup -c -T mssim:host=localhost,port=2321\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" tpm2_startup -c -T mssim:host=localhost,port=2321\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This command initializes the TPM simulator. -c clears the TPM memory (similar to resetting the TPM), and -T mssim:host=localhost,port=2321 specifies that the TPM tool (tpm2) should communicate with a TPM simulator running on the local machine (localhost) and listening on port 2321."}]},{"type":"element","tag":"h1","props":{"id":"_2-read-a-pcr"},"children":[{"type":"text","value":"2. Read a PCR"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":" tpm2_pcrread -T mssim:host=localhost,port=2321 sha256\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" tpm2_pcrread -T mssim:host=localhost,port=2321 sha256\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This reads the current values of the PCR slots using the SHA-256 hashing algorithm. PCRs are special registers in a TPM used to store hash values that represent a snapshot of the system state. They are used in the secure boot process and software attestation to ensure system integrity."}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"  sha256:\n    0 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    1 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    2 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    3 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    4 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    5 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    6 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    7 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    8 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    9 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    10: 0x0000000000000000000000000000000000000000000000000000000000000000\n    11: 0x0000000000000000000000000000000000000000000000000000000000000000\n    12: 0x0000000000000000000000000000000000000000000000000000000000000000\n    13: 0x0000000000000000000000000000000000000000000000000000000000000000\n    14: 0x0000000000000000000000000000000000000000000000000000000000000000\n    15: 0x0000000000000000000000000000000000000000000000000000000000000000\n    16: 0x0000000000000000000000000000000000000000000000000000000000000000\n    17: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    18: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    19: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    20: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    21: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    22: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    23: 0x0000000000000000000000000000000000000000000000000000000000000000\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"  sha256:\n    0 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    1 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    2 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    3 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    4 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    5 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    6 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    7 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    8 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    9 : 0x0000000000000000000000000000000000000000000000000000000000000000\n    10: 0x0000000000000000000000000000000000000000000000000000000000000000\n    11: 0x0000000000000000000000000000000000000000000000000000000000000000\n    12: 0x0000000000000000000000000000000000000000000000000000000000000000\n    13: 0x0000000000000000000000000000000000000000000000000000000000000000\n    14: 0x0000000000000000000000000000000000000000000000000000000000000000\n    15: 0x0000000000000000000000000000000000000000000000000000000000000000\n    16: 0x0000000000000000000000000000000000000000000000000000000000000000\n    17: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    18: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    19: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    20: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    21: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    22: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    23: 0x0000000000000000000000000000000000000000000000000000000000000000\n"}]}]},{"type":"element","tag":"h1","props":{"id":"_3-calculate-sha-256-hash"},"children":[{"type":"text","value":"3. Calculate SHA-256 hash"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":" SHA256_DATA=$(echo \"CRITICAL-DATA\" | openssl dgst -sha256 -binary | xxd -p -c 32)\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" SHA256_DATA=$(echo \"CRITICAL-DATA\" | openssl dgst -sha256 -binary | xxd -p -c 32)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We will simply use the plain text \"CRITICAL-DATA\" as our sensitive data that we will be encrypting and decrypting."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This command calculates the SHA-256 hash of the string \"CRITICAL-DATA\", converts the output to binary, and then formats it as a hex string."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The result is stored in the variable SHA256_DATA."}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":" SHA256_DATA = ab805369897acf5a4536130b2d8799d6bcb9506de0f490b656ff7037f360a005\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" SHA256_DATA = ab805369897acf5a4536130b2d8799d6bcb9506de0f490b656ff7037f360a005\n"}]}]},{"type":"element","tag":"h1","props":{"id":"_4-calculate-sha-1-hash"},"children":[{"type":"text","value":"4. Calculate SHA-1 hash"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":" SHA1_DATA=$(echo \"CRITICAL-DATA\" | openssl dgst -sha1 -binary | xxd -p -c 20)\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" SHA1_DATA=$(echo \"CRITICAL-DATA\" | openssl dgst -sha1 -binary | xxd -p -c 20)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Similar to the previous step, this calculates the SHA-1 hash of the string \"CRITICAL-DATA\", converts it to binary, formats it as a hex string."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The result is stored in the variable SHA1_DATA."}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":" SHA1_DATA = 39739bfcd59c10bc8b220398a4c868dbe41c455c\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" SHA1_DATA = 39739bfcd59c10bc8b220398a4c868dbe41c455c\n"}]}]},{"type":"element","tag":"h1","props":{"id":"_5-extend-pcr-0-1-and-2-with-the-calculated-hash-values"},"children":[{"type":"text","value":"5. Extend PCR 0, 1, and 2 with the calculated hash values"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":" tpm2_pcrextend 0:sha1=$SHA1_DATA,sha256=$SHA256_DATA -T mssim:host=localhost,port=2321\n\n tpm2_pcrextend 1:sha1=$SHA1_DATA,sha256=$SHA256_DATA -T mssim:host=localhost,port=2321 \n\n tpm2_pcrextend 2:sha1=$SHA1_DATA,sha256=$SHA256_DATA -T mssim:host=localhost,port=2321\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" tpm2_pcrextend 0:sha1=$SHA1_DATA,sha256=$SHA256_DATA -T mssim:host=localhost,port=2321\n\n tpm2_pcrextend 1:sha1=$SHA1_DATA,sha256=$SHA256_DATA -T mssim:host=localhost,port=2321 \n\n tpm2_pcrextend 2:sha1=$SHA1_DATA,sha256=$SHA256_DATA -T mssim:host=localhost,port=2321\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This extends the values in PCR slots 0, 1, and 2 with the hash values calculated in the previous steps. \"Extending\" a PCR involves taking the current value of the PCR, concatenating the new hash value, and then hashing the entire string to create a new value for the PCR. This process ensures that the PCR values represent a cumulative hash of all extended values, providing a secure way to measure system state and changes."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In a real system like a computer for example each stage of the boot sequence would concateante the PCR, ensuring secure tracability of execution."}]},{"type":"element","tag":"h1","props":{"id":"_6-read-the-pcr-values"},"children":[{"type":"text","value":"6. Read the PCR values"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":" tpm2_pcrread -T mssim:host=localhost,port=2321 sha1:0,1,2+sha256:0,1,2\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" tpm2_pcrread -T mssim:host=localhost,port=2321 sha1:0,1,2+sha256:0,1,2\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Finally, this command reads the PCR values for slots 0, 1, and 2 using both SHA-1 and SHA-256 hashing algorithms to verify that they have been extended correctly with the calculated hash values."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This sequence of commands is essential for TPM management and operations, particularly in environments where security and system integrity are critical."}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"  sha1:\n    0 : 0xA3EBF00F6520B2C85DBBF3D32B6A8B3A30ABB748\n    1 : 0xA3EBF00F6520B2C85DBBF3D32B6A8B3A30ABB748\n    2 : 0xA3EBF00F6520B2C85DBBF3D32B6A8B3A30ABB748\n  sha256:\n    0 : 0xAF42D77065F4791B6738DA5944E6B4074E3190F0993B5EE5D42DC4FBED424ABA\n    1 : 0xAF42D77065F4791B6738DA5944E6B4074E3190F0993B5EE5D42DC4FBED424ABA\n    2 : 0xAF42D77065F4791B6738DA5944E6B4074E3190F0993B5EE5D42DC4FBED424ABA\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"  sha1:\n    0 : 0xA3EBF00F6520B2C85DBBF3D32B6A8B3A30ABB748\n    1 : 0xA3EBF00F6520B2C85DBBF3D32B6A8B3A30ABB748\n    2 : 0xA3EBF00F6520B2C85DBBF3D32B6A8B3A30ABB748\n  sha256:\n    0 : 0xAF42D77065F4791B6738DA5944E6B4074E3190F0993B5EE5D42DC4FBED424ABA\n    1 : 0xAF42D77065F4791B6738DA5944E6B4074E3190F0993B5EE5D42DC4FBED424ABA\n    2 : 0xAF42D77065F4791B6738DA5944E6B4074E3190F0993B5EE5D42DC4FBED424ABA\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:TPM.md","_source":"content","_file":"TPM.md","_extension":"md"}],"navigation":[{"title":"Modeling an ml model for detecting bots in a social network","_path":"/detecting-bot-tweets-using-supervised-learning-and-meta-data-feature-sets"},{"title":"About me","_path":"/hello"},{"title":"Simple physics simulation using Box2D","_path":"/pyshics-test"},{"title":"Database operations in a real time system","_path":"/rt-databases"},{"title":"Dynamic scheduling visualization with Cheddar","_path":"/rt-scheduling-tests"},{"title":"Real-time system scheduling overview","_path":"/rt-scheduling"},{"title":"Exploring the Trusted Platform Module (TPM)","_path":"/tpm"}]}